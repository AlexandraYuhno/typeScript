// Виды пасты - spagetti/penne/macaroni
// Tags: Union, Enum, Narrowing

enum TypePasta {
      SPAGETTI = "spagetti",
      PENNE = "penne",
      MACARONI = "macaroni",
  }
  interface generalIngredient{
    hasSauce:boolean,
    hasCheese:boolean,
  }
  interface ingredientPizza extends generalIngredient{
    hasPepperoni:boolean,
    bakeTime:number,
    bake(): void,
  }

  interface ingredientPasta extends generalIngredient{
    pastaType:TypePasta,
    cookTime:number,
    cook(): void,
  }

  class Pizza implements ingredientPizza {
    constructor(
      public hasPepperoni:boolean,
      public hasSauce:boolean,
      public hasCheese:boolean,
      public bakeTime:number = 30,
    ){}
  
    bake(): void {
      setTimeout(console.log, this.bakeTime, 'Enjoy your pizza!');
    }
  }
  
  class Pasta implements ingredientPasta{
     constructor(
      public pastaType:TypePasta,
      public hasSauce:boolean,
      public hasCheese:boolean,
      public cookTime:number = 30,
    ) {}
  
    cook(): void {
        setTimeout(console.log, this.cookTime, 'Enjoy your pasta!');
    }
  }
  
  function throwError (message: string):never {
      throw new Error(message)
  }
  
interface CookRoom {
  makeDish:(dish: Pasta | Pizza) => Pasta | Pizza| never,
}

  class Kitchen implements CookRoom{
    makeDish(dish: Pasta | Pizza){
      if (dish instanceof Pizza) {
          dish.bake();
          return dish;
      } else if (dish instanceof Pasta) {
          dish.cook();
          return dish;
      } 
      throwError('Unknown dish');
    }
  }
  
  const kitchen = new Kitchen();
  const pizza = new Pizza(true, true, false);
  const pasta = new Pasta(TypePasta.SPAGETTI, true, true);
  
  kitchen.makeDish(pasta);
  kitchen.makeDish(pizza);
  
