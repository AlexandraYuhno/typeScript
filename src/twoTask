// Виды пасты - spagetti/penne/macaroni
// Tags: Union, Enum, Narrowing

enum TypePasta {
  SPAGETTI = "spagetti",
  PENNE = "penne",
  MACARONI = "macaroni",
}

interface GeneralIngredient {
  hasSauce: boolean,
  hasCheese: boolean,
}

interface IngredientPizza extends GeneralIngredient {
  hasPepperoni: boolean,
  bakeTime: number,
  bake(): void,
}

interface IngredientPasta extends GeneralIngredient {
  pastaType: TypePasta,
  cookTime: number,
  cook(): void,
}

class Pizza implements IngredientPizza {
  hasPepperoni: boolean;
  hasSauce: boolean;
  hasCheese: boolean;
  bakeTime: number = 30;

  constructor(hasPepperoni:boolean, hasSauce: boolean, hasCheese:boolean) {
    this.hasPepperoni = hasPepperoni;
    this.hasSauce = hasSauce;
    this.hasCheese = hasCheese;
  } 
  bake(): void {
    setTimeout(console.log, this.bakeTime, 'Enjoy your pizza!');
  }
}

class Pasta implements IngredientPasta {
  pastaType: TypePasta;
  hasSauce: boolean;
  hasCheese: boolean;
  cookTime: number = 30;

  constructor(pastaType:TypePasta, hasSauce:boolean, hasCheese:boolean) {
      this.pastaType = pastaType;
      this.hasCheese = hasCheese;
      this.hasSauce = hasSauce;
  }

  cook(): void {
    setTimeout(console.log, this.cookTime, 'Enjoy your pasta!');
  }
}

type Food = Pasta | Pizza;

interface CookRoom {
  makeDish: (dish: Food) => Food | never,
}

class Kitchen implements CookRoom {
  makeDish(dish: Food): Food | never {
    if (dish instanceof Pizza) {
      dish.bake();
      return dish;
    } else if (dish instanceof Pasta) {
      dish.cook();
      return dish;
    }
    throw new Error('Unknown dish');;
  }
}

const kitchen = new Kitchen();
const pizza = new Pizza(true, true, false);
const pasta = new Pasta(TypePasta.SPAGETTI, true, true);

kitchen.makeDish(pasta);
kitchen.makeDish(pizza);
